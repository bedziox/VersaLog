# ----------------- UseCaseDiagram -----------------
@startuml 
:User:
:NotLoggedUser:
:Admin:
:LoggedUser:
:NormalUser:

(Log in) as login
(Register) as register
(Enter main page) as mainpage
(Add training) as add
(Edit training) as edit
(Display summary) as summary
(List users)  as list
(Select user) as select
(Enter profile) as profile
(Delete account) as delete
(Log out) as logout

NotLoggedUser -- login
NotLoggedUser -- register
NotLoggedUser -left-> mainpage

NormalUser -- add
NormalUser -- edit
NormalUser -- summary

Admin -left- list
Admin -down- select

select -- add : <<include>>
select -- edit : <<include>>
select -- summary : <<include>>


LoggedUser - profile
profile -down- delete : <<include>>
LoggedUser -up- logout

User -> LoggedUser
User -left-> NotLoggedUser
LoggedUser -> NormalUser
LoggedUser ---> Admin


@enduml
# ----------------- ClassDiagrams -----------------
@startuml ServerClassDiagram
skinparam classAttributeIconSize 0
class AuthController {
  - _context : VersaDbContext 
  - _configuration : IConfiguration 
  - string _keyToken  
  + async Register(UserDto request) : Task<ActionResult<User>>
  + async Login(UserDto request) : Task<ActionResult<User>>
  + ValidateToken(string token, int userId) : ActionResult<User>
  - CreateToken(User user) : string
}

class ExerciseController {
  - _context : VersaDbContext
  + async GetAll() : Task<ActionResult<List<Exercise>>>
  + GetById(id : int) : ActionResult<Exercise>
  + async AddExercise(request : Exercise) : Task<ActionResult<Exercise>>
  + async EditExercise(request : Exercise) : Task<ActionResult>
  + async DeleteExercise(exerciseId : int) : Task<ActionResult>
}

class TrainingController {
  - _context : VersaDbContext
  + GetAll() : Task<ActionResult<List<Training>>>
  + GetById(id : int) : ActionResult<TrainingDto>
  + GetAllByUser(userId : int) : ActionResult<List<TrainingDto>>
  + GetAllByUserTypeAndDate(userId : int, type : ExerciseType,dateStart : DateTime?,  dateEnd : DateTime?) : ActionResult<List<TrainingDto>>
  + GetByUserAndId(userId : int, trainingId : int) : ActionResult<TrainingDto>
  + AddTraining(request : TrainingDto) : Task<ActionResult<Training>>
  + EditTraining(id : int, trainingDto : TrainingDto) : Task<ActionResult>
  + DeleteTraining(trainingId : int) : Task<ActionResult>
}

class UserController {
  - _context : VersaDbContext
  + async GetAll() : Task<ActionResult<List<User>>>
  + async GetById(id : int) : ActionResult<User>
  + async DeleteUser(id : int) : Task<ActionResult>
}

class UserDto {
  + Id : int
  + FirstName : string
  + LastName : string
  + Username : string
  + Password : string
  + Email : string
  + Token : string
  + Role : string
}

class TrainingDto {
  + TrainingId : int
  + DateAssigned : DateTime
  + Status : Status
  + ExerciseResults : List<Exercise>
  + UserId : int
}

class ExerciseResult{
    + ExerciseResultId : int
    + Exercise Exercise : Exercise
    + ExerciseId : int
    + Result : string
    + Sets : int
    + Reps : int
    + virtual Training : Training
    + TrainingId : int
}

class ExerciseResultDto{
    + ExerciseResultId : int
    + Exercise : Exercise
    + Result : string
    + Sets : int
    + Reps : int
}

class UserBuilder {
  + BuildUser(UserDto request) : User
}

class UserValidation {
  + ValidateEmail(email : string) : bool
  + ValidatePassword(password : string) : bool
}

class Exercise {
  + ExerciseId : int
  + Name : string
  + Description : string
  + Type : ExerciseType
}

class Training {
  + TrainingId : int
  + DateAssigned : DateTime
  + Status : Status
  + ExerciseResults : List<ExerciseResult>
  + User : User
  + UserId : int
}

class User {
  + UserId : int
  + FirstName : string
  + LastName : string
  + Username : string
  + PasswordHash : string
  + Email : string
  + Trainings : List<Training>
  + Role : Role
}

enum ExerciseType {
  Strength
  Balance
  Cycling
  Flexibility
  Aerobic
  Jogging
  TeamGame
}

enum Status {
  New
  InProgress
  Done
  Cancelled
  Outdated
}

enum Role{
    User
    Admin
}

UserBuilder -up- User

AuthController -- UserDto

UserValidation -up- UserBuilder

TrainingDto -up- TrainingController : <<consumes>> : <<returns>> 

Status ||-|| Training : <<has>>

ExerciseType  ||--|| Exercise : <<has>>

User ||--left-|{ Training : <<has>>
User ||-|| Role : <<has>>
Training ||--|{ ExerciseResult : <<has>>
ExerciseResult }o--|| Exercise : <<has>>

AuthController -left- User : <<returns>>
ExerciseController -- Exercise : <<returns>>
TrainingController -- Training : <<returns>>
TrainingDto -down- ExerciseResultDto : <<uses>>
UserController -- User : <<returns>>



@enduml


# ----------------- ComponentDiagram -----------------

@startuml

package Server{
    package Controllers{
        component AuthController <<component>>
        component TrainingController <<component>>
        component UserController <<component>>
        component ExerciseController <<component>>
    }
    package Models{
        component User <<component>>
        component Training <<component>>
        component Exercise <<component>>
    }
    component DbContext <<component>>
}

package Client{
node Router
node App
}

interface interface as int1
interface interface as int2
interface interface as int3
interface interface as int4

Router -left-( interface
interface -up- AuthController
App --( int1
int1 -- AuthController

App --( int2
int2 -- TrainingController

App --( int3
int3 -- UserController

App --( int4
int4 -- ExerciseController



node Database{
}

Database -- DbContext : Entity Framework

@enduml


# ----------------- DeploymentDiagram -----------------

@startuml
node cloud <<device>>{
node DBServer <<device>>{
 database postgresql <<artifact>>{
 rectangle Exercises <<schema>>{
 } 
 rectangle ExerciseTraining <<schema>>{
 }
 rectangle Trainings <<schema>>{
 }
 rectangle Users <<schema>>{
 }
 }
}
}

server ---- cloud : TCP/IP <<protocol>>

node server <<device>>{
node .NET <<environment>>{
    node WebServer <<artifact>>

    component appsettings.json <<artifact>>
    component Program.cs <<artifact>>
    component VersaDbContext.cs <<artifact>>
}
}

server -- client : HTTPS <<protocol>>

node client <<device>>{
component WebBrowser{
node App.vue <<artifact>>
}
}
 
@enduml

# ----------------- SequenceDiagrams -----------------
@startuml AuthRegistration

Actor User as user
Participant Client as app
Participant Server as server
Participant AuthController as auth
database Database as db

user -> app : Registration request
app -> server : POST Request processed
server -> auth : Request passed
auth -> auth : Request validation
note over auth : Email and password validation
alt Registration validation successful
    auth -> db : User saved
    auth -> server : Registration response [200]
    server -> app : Registration response [200]
    app -> user : Response displayed [200]
else
    auth -> server: Failed registration [400]
    server -> app : Registration response [400]
    app -> user : Response displayed [400]
end
@enduml

@startuml AuthLogin

Actor User as user
Participant Client as app
Participant Server as server
Participant AuthController as auth
database Database as db

user -> app : Login request
app -> server : POST Request processed
server -> auth : Request passed
auth -> db : Check if user exists
db -> auth : Query response
note over auth, db : User may login by email or username
alt User exists
    auth -> auth : Create token
    auth -> server : Response with token passed [200]
    server -> app : Response with token passed [200]
    app -> user : User logged in
else
    auth -> server : Response passed [400]
    server -> app : Response passed [400]
    app -> user : Response displayed, user does not exist  [400]
end
@enduml

@startuml AuthTokenValidity
Actor User as user
Participant Client as app
Participant Server as server
Participant AuthController as auth

user -> app : Page accessing request
app -> server : POST Token passed from LocalStorage
server -> auth : Token passed to AuthController
auth -> auth : Token validation
alt Token valid
    auth -> server : Response with token passed [200]
    server -> app : Response with token passed [200]
    app -> user : User authorized
else
    auth -> server : Response passed [401]
    server -> app : Response passed [401]
    app -> user : Response displayed, user not authorized [401]
end
@enduml

# ----------------- ActivityDiagrams -----------------

@startuml AddTraining
start
partition client{
:Form reached;
repeat
:Select exercise;
if (Exercise exists?) then (yes)
    :Create ExerciseResult;
    :Add exercise to ExerciseResult;
else (no)
    :Add Exercise;
    note right: Ref AddExercise diagram
    :Create ExerciseResult;
    :Add ExerciseResult to list;
endif
repeat while (More exercises?) is (yes)
:Add date;
:Save training to server;
}
partition server{
    :Find user;
    if (User exists?) then (yes)
    :Create training from DTO;
    while (For ExerciseResultsDto in TrainingDto)
        :Find exercise;
        if (Exercise exists?) then (yes)
            :Create ExerciseResult object;
            :Assign values from DTO;
        else (no)
            #pink:Return error;
            stop
        endif
    endwhile (Done)
    else
        #pink:Return error;
        stop
    endif
    :Assign found exercises to ExerciseResult;
    :Save training to database;
    :Return training;
}
stop
@enduml

@startuml AddTrainingAdmin
start
partition client{
:Form reached;
:Select user;
repeat
:Select exercise;
if (Exercise exists?) then (yes)
    :Create ExerciseResult;
    :Add exercise to ExerciseResult;
else (no)
    :Add Exercise;
    note right: Ref AddExercise diagram
    :Create ExerciseResult;
    :Add ExerciseResult to list;
endif
repeat while (More exercises?) is (yes)
:Add date;
:Save training to server;
}
partition server{
    :Find user;
    if (User exists?) then (yes)
    :Create training from DTO;
    while (For ExerciseResultsDto in TrainingDto)
        :Find exercise;
        if (Exercise exists?) then (yes)
            :Create ExerciseResult object;
            :Assign values from DTO;
        else (no)
            #pink:Return error;
            stop
        endif
    endwhile (Done)
    else
        #pink:Return error;
        stop
    endif
    :Assign found exercises to ExerciseResult;
    :Save training to database;
    :Return training;
}
stop
@enduml


@startuml EditTraining
start
partition client{
    :Select training to edit;
    :Click Edit;
    :Edit available ExerciseResults;
    if (ExerciseResult deleted?) then (no)
        :Edit existing ExerciseResult;
    else (yes)
        :Remove ExerciseResult from available;
    endif
    
    :Save training to server;
}
partition server{
    :Find training;
    if (Training exists?) then (yes)
        :Extract data from DTO;
        :Iterate ExerciseResults;
        if (ExerciseResult exists?) then (no)
            :Remove ExerciseResult;
        else
            :Assign from DTO to ExerciseResult;
        endif
    else
        #pink:Return error;
        stop
    endif
    :Return edited Training;
}
stop
@enduml

@startuml AddExercise
start
partition client{
    :Fill form;
    :Save Exercise to server;
}
partition server{
    :Find exercise;
    if (Exercise exists?) then (no)
        :Create new exercise;
        :Assign data from DTO;
        :Save training to database;
        :Return new Exercise to server;
    else (yes)
        #pink:Return error;
        stop
    endif
}
stop
@enduml



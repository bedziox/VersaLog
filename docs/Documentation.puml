#UseCaseDiagrams
@startuml Registration
(Enter register page) as enter
(Fill form data) as form
(Submit form) as submit
(Pass DTO) as pass
(Validate data) as validate
(Register user) as register
(Send response) as response
(Redirect with response) as redirect

User -> enter
enter -> form
form -> submit
submit -> Client
Client --> pass
pass --> Server
Server -left-> validate
validate -left-> register
register -left-> response
response --> Client
Client --> redirect
redirect --> User

@enduml

@startuml Login
(Enter login page) as enter
(Fill login and password) as form
(Submit form) as submit
(Pass DTO) as pass
(Validate data) as validate
(Check user existing) as check_existing
(Generate JWT) as generate
(Send response) as response
(Handle response) as handle_response

User -> enter
enter -> form
form -> submit
submit -> Client
Client --> pass
pass --> Server
Server -left-> validate
validate -left-> check_existing
check_existing -> generate
generate -> response
response --> Client
Client --> handle_response
handle_response --> User

@enduml

#ClassDiagrams
@startuml ServerClassDiagram
class AuthController {
  + Register(UserDto request) : User
  + Login(UserDto request) : User
}

class ExerciseController {
  + GetAll() : List<Exercise>
  + GetById(id : int) : Exercise?
  + AddExercise(request : Exercise) : Exercise
  + EditExercise(request : Exercise) : ActionResult
  + DeleteExercise(exerciseId : int) : ActionResult
}

class TrainingController {
  + GetAll() : List<Training>
  + GetById(id : int) : Training?
  + GetAllByUser(userId : int) : List<Training>
  + GetByUserAndId(userId : int, trainingId : int) : Training
  + AddTraining(request : TrainingDto) : ActionResult<Training>
  + EditTraining(id : int, trainingDto : TrainingDto) : IActionResult
  + DeleteTraining(trainingId : int) : ActionResult
}

class UserController {
  + GetAll() : ActionResult<User>
  + GetById(id : int) : ActionResult<User>
  + DeleteUser(id : int) : ActionResult
}

class UserDto {
  - Id : int
  - FirstName : string
  - LastName : string
  - Username : string
  - Password : string
  - Email : string
  - Token : string
}

class TrainingDto {
  - TrainingId : int
  - DateAssigned : DateTime
  - Status : Status
  - Exercises : ICollection<Exercise>
  - Results : ICollection<string>
  - UserId : int
}

class UserBuilder {
  + BuildUser(UserDto request) : User
}

class UserValidation {
  + ValidateEmail(email : string) : bool
  + ValidatePassword(password : string) : bool
}

enum ExerciseType {
  Strength
  Balance
  Cycling
  Flexibility
  Aerobic
  Jogging
  TeamGame
}

enum Status {
  New
  InProgress
  Done
  Cancelled
  Outdated
}

User "1" -- "many" Training : ma
Training "many" -- "many" Exercise : zawiera

AuthController -- "1" User
ExerciseController -- "1" Exercise
TrainingController -- "1" Training
UserController -- "1" User

class Exercise {
  - ExerciseId : int
  - Name : string
  - Description : string
  - Type : ExerciseType
}

class Training {
  - TrainingId : int
  - DateAssigned : DateTime
  - Status : Status
  - Exercises : List<Exercise>
  - Results : List<string>
  - User : User
  - UserId : int
}

class User {
  - UserId : int
  - FirstName : string
  - LastName : string
  - Username : string
  - PasswordHash : string
  - Email : string
  - Trainings : List<Training>
}


@enduml


@startuml ClientClassDiagram
@enduml

#SequenceDiagrams
@startuml AuthRegistration

Actor User as user
Participant Client as app
Participant Server as server
Participant AuthController as auth
database Database as db

user -> app : Registration request
app -> server : POST Request processed
server -> auth : Request passed
auth -> auth : Request validation
note over auth : Email and password validation
alt Registration validation successful
    auth -> db : User saved
    auth -> server : Registration response [200]
    server -> app : Registration response [200]
    app -> user : Response displayed [200]
else
    auth -> server: Failed registration [400]
    server -> app : Registration response [400]
    app -> user : Response displayed [400]
end
@enduml

@startuml AuthLogin

Actor User as user
Participant Client as app
Participant Server as server
Participant AuthController as auth
database Database as db

user -> app : Login request
app -> server : POST Request processed
server -> auth : Request passed
auth -> db : Check if user exists
db -> auth : Query response
note over auth, db : User may login by email or username
alt User exists
    auth -> auth : Create token
    auth -> server : Response with token passed [200]
    server -> app : Response with token passed [200]
    app -> user : User logged in
else
    auth -> server : Response passed [400]
    server -> app : Response passed [400]
    app -> user : Response displayed, user does not exist  [400]
end
@enduml

@startuml AuthTokenValidity
Actor User as user
Participant Client as app
Participant Server as server
Participant AuthController as auth

user -> app : Page accessing request
app -> server : POST Token passed from LocalStorage
server -> auth : Token passed to AuthController
auth -> auth : Token validation
alt Token valid
    auth -> server : Response with token passed [200]
    server -> app : Response with token passed [200]
    app -> user : User authorized
else
    auth -> server : Response passed [401]
    server -> app : Response passed [401]
    app -> user : Response displayed, user not authorized [401]
end
@enduml
#ActivityDiagrams

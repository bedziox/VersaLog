#Authentication
@startuml AuthRegistration
Actor User as user
Participant Client as app
Participant Server as server
Participant AuthController as auth
database Database as db

user -> app : Registration request
app -> server : POST Request processed
server -> auth : Request passed
auth -> auth : Request validation
note over auth : Email and password validation
alt Registration validation successfull
    auth -> db : User saved
    auth -> server : Registration response [200]
    server -> app : Registragion response [200]
    app -> user : Response displayed [200]
else
    auth -> server: Failed registration [400]
    server -> app : Registragion response [400]
    app -> user : Response displayed [400]
end
@enduml

@startuml AuthLogin
Actor User as user
Participant Client as app
Participant Server as server
Participant AuthController as auth
database Database as db
user -> app : Login request
app -> server : POST Request processed
server -> auth : Request passed
auth -> db : Check if user exists
db -> auth : Query response
note over auth, db : User may login by email or username
alt User exists
    auth -> auth : Create token
    auth -> server : Response with token passed [200]
    server -> app : Response with token passed [200]
    app -> user : User logged in
else
    auth -> server : Response passed [400]
    server -> app : Response passed [400]
    app -> user : Response displayed, user does not exist  [400]
end
@enduml